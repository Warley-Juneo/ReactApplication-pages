{"ast":null,"code":"// import axios from \"axios\"\n\nconst urlRegister = 'http://localhost:8080/register';\nconst urlLogin = 'http://localhost:8080/login';\nconst urlAuthenticate = 'http://localhost:8080/authenticate';\nexport const ApiRegister = async (name, email, password) => {\n  const update = {\n    username: name,\n    email: email,\n    password: password\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(update)\n  };\n  let response = await fetch(urlRegister, options).then(encoded => encoded.json()).then(response => response);\n  console.log(response);\n  return response;\n};\n_c = ApiRegister;\nexport const ApiLogin = async (email, password) => {\n  const update = {\n    email: email,\n    password: password\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(update)\n  };\n  let response = await fetch(urlLogin, options).then(encoded => encoded.json()).then(response => response);\n  if (response.error) {\n    console.log(\"error\");\n  } else {\n    console.log(\"sucesso no login\");\n  }\n};\n_c2 = ApiLogin;\nexport const ApiAuthenticate = async (email, password, token) => {\n  const update = {\n    email: email,\n    password: password,\n    token: token\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(update)\n  };\n  let response = await fetch(urlAuthenticate, options).then(encoded => encoded.json()).then(response => response);\n  console.log(response);\n  return response;\n};\n_c3 = ApiAuthenticate;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ApiRegister\");\n$RefreshReg$(_c2, \"ApiLogin\");\n$RefreshReg$(_c3, \"ApiAuthenticate\");","map":{"version":3,"names":["urlRegister","urlLogin","urlAuthenticate","ApiRegister","name","email","password","update","username","options","method","headers","body","JSON","stringify","response","fetch","then","encoded","json","console","log","ApiLogin","error","ApiAuthenticate","token"],"sources":["/home/wjuneo/Trabalho/42Labs/bankline/ReactApplication-pages/my-app/src/services/api.jsx"],"sourcesContent":["// import axios from \"axios\"\n\nconst urlRegister = 'http://localhost:8080/register'\nconst urlLogin = 'http://localhost:8080/login'\nconst urlAuthenticate = 'http://localhost:8080/authenticate'\n\nexport const ApiRegister = async (name, email, password) => {\n\tconst update = {\n\t\tusername: name,\n\t\temail: email,\n\t\tpassword: password,\n\t};\n\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(update)\n\t};\n\tlet response = await fetch(urlRegister, options)\n\t.then(encoded => encoded.json())\n\t.then(response => response)\n\tconsole.log(response)\n\treturn (response)\n}\n\nexport const ApiLogin = async (email, password) => {\n\tconst update = {\n\t\temail: email,\n\t\tpassword: password,\n\t};\n\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(update)\n\t};\n\tlet response = await fetch(urlLogin, options)\n\t.then(encoded => encoded.json())\n\t.then(response => response)\n\n\tif (response.error) {\n\t\tconsole.log(\"error\")\n\t}\n\telse {\n\t\tconsole.log(\"sucesso no login\")\n\t}\n}\n\nexport const ApiAuthenticate = async (email, password, token) => {\n\tconst update = {\n\t\temail: email,\n\t\tpassword: password,\n\t\ttoken: token,\n\t};\n\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(update)\n\t};\n\tlet response = await fetch(urlAuthenticate, options)\n\t.then(encoded => encoded.json())\n\t.then(response => response)\n\tconsole.log(response)\n\treturn (response)\n}\n\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,gCAAgC;AACpD,MAAMC,QAAQ,GAAG,6BAA6B;AAC9C,MAAMC,eAAe,GAAG,oCAAoC;AAE5D,OAAO,MAAMC,WAAW,GAAG,OAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC3D,MAAMC,MAAM,GAAG;IACdC,QAAQ,EAAEJ,IAAI;IACdC,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACX,CAAC;EAED,MAAMG,OAAO,GAAG;IACfC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,MAAM;EAC5B,CAAC;EACD,IAAIQ,QAAQ,GAAG,MAAMC,KAAK,CAAChB,WAAW,EAAES,OAAO,CAAC,CAC/CQ,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC,CAC/BF,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAAC;EAC3BK,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;EACrB,OAAQA,QAAQ;AACjB,CAAC;AAAA,KAnBYZ,WAAW;AAqBxB,OAAO,MAAMmB,QAAQ,GAAG,OAAOjB,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMC,MAAM,GAAG;IACdF,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACX,CAAC;EAED,MAAMG,OAAO,GAAG;IACfC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,MAAM;EAC5B,CAAC;EACD,IAAIQ,QAAQ,GAAG,MAAMC,KAAK,CAACf,QAAQ,EAAEQ,OAAO,CAAC,CAC5CQ,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC,CAC/BF,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAAC;EAE3B,IAAIA,QAAQ,CAACQ,KAAK,EAAE;IACnBH,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACrB,CAAC,MACI;IACJD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAChC;AACD,CAAC;AAAA,MAvBYC,QAAQ;AAyBrB,OAAO,MAAME,eAAe,GAAG,OAAOnB,KAAK,EAAEC,QAAQ,EAAEmB,KAAK,KAAK;EAChE,MAAMlB,MAAM,GAAG;IACdF,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA,QAAQ;IAClBmB,KAAK,EAAEA;EACR,CAAC;EAED,MAAMhB,OAAO,GAAG;IACfC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACR,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,MAAM;EAC5B,CAAC;EACD,IAAIQ,QAAQ,GAAG,MAAMC,KAAK,CAACd,eAAe,EAAEO,OAAO,CAAC,CACnDQ,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC,CAC/BF,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAAC;EAC3BK,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;EACrB,OAAQA,QAAQ;AACjB,CAAC;AAAA,MAnBYS,eAAe;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}